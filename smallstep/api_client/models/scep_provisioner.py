from typing import Any, Dict, List, Type, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.scep_provisioner_encryption_algorithm_identifier import SCEPProvisionerEncryptionAlgorithmIdentifier
from ..types import UNSET, Unset

T = TypeVar("T", bound="SCEPProvisioner")


@_attrs_define
class SCEPProvisioner:
    """The [SCEP provisioner](https://smallstep.com/docs/step-ca/provisioners/#scep) grants certificates to clients using
    the SCEP protocol. This type is currently experimental and subject to change.

        Attributes:
            autogenerate_decrypter (Union[Unset, bool]): Automatically generate a new RSA decrypter instead of providing
                one.
            challenge (Union[Unset, str]): A static challenge secret.
            decrypter_certificate (Union[Unset, str]): A pem-encoded certificate for an RSA public key.
            decrypter_key (Union[Unset, str]): The pem-encoded RSA private key, corresponding to the certificate public key.
            decrypter_key_password (Union[Unset, str]): The password for the pem-encoded RSA private key, if any.
            encryption_algorithm_identifier (Union[Unset, SCEPProvisionerEncryptionAlgorithmIdentifier]): The encryption
                algorithm used for encrypting responses to the SCEP client:
                 * `DES_CBC`    - [DES in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.1) - `1.3.14.3.2.7`
                 * `AES_128_CBC` - [AES-128 in CBC mode](https://www.rfc-editor.org/rfc/rfc8018.html#appendix-B.2.5) -
                `2.16.840.1.101.3.4.1.2`
                 * `AES_128_GCM` - [AES-128 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) -
                `2.16.840.1.101.3.4.1.6`
                 * `AES_256_CBC` - [AES-256 in CBC mode](https://www.rfc-editor.org/rfc/rfc3565.html#section-4.1) -
                `2.16.840.1.101.3.4.1.42`
                 * `AES_256_GCM` - [AES-256 in GCM mode](https://www.rfc-editor.org/rfc/rfc5084.html#section-3.2) -
                `2.16.840.1.101.3.4.1.46`
                 Default: SCEPProvisionerEncryptionAlgorithmIdentifier.AES_256_CBC.
            exclude_intermediate (Union[Unset, bool]): Exclude the intermediate CA certificate in SCEP responses. Default:
                False.
            force_cn (Union[Unset, bool]): Force one of the SANs to become the Common Name, if a Common Name is not
                provided.
            include_root (Union[Unset, bool]): Include the root CA certificate in SCEP responses. Default: False.
            minimum_public_key_length (Union[Unset, int]): The minimum number of bits for RSA public keys accepted in SCEP
                requests. Default: 2048.
    """

    autogenerate_decrypter: Union[Unset, bool] = UNSET
    challenge: Union[Unset, str] = UNSET
    decrypter_certificate: Union[Unset, str] = UNSET
    decrypter_key: Union[Unset, str] = UNSET
    decrypter_key_password: Union[Unset, str] = UNSET
    encryption_algorithm_identifier: Union[
        Unset, SCEPProvisionerEncryptionAlgorithmIdentifier
    ] = SCEPProvisionerEncryptionAlgorithmIdentifier.AES_256_CBC
    exclude_intermediate: Union[Unset, bool] = False
    force_cn: Union[Unset, bool] = UNSET
    include_root: Union[Unset, bool] = False
    minimum_public_key_length: Union[Unset, int] = 2048
    additional_properties: Dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        autogenerate_decrypter = self.autogenerate_decrypter

        challenge = self.challenge

        decrypter_certificate = self.decrypter_certificate

        decrypter_key = self.decrypter_key

        decrypter_key_password = self.decrypter_key_password

        encryption_algorithm_identifier: Union[Unset, str] = UNSET
        if not isinstance(self.encryption_algorithm_identifier, Unset):
            encryption_algorithm_identifier = self.encryption_algorithm_identifier.value

        exclude_intermediate = self.exclude_intermediate

        force_cn = self.force_cn

        include_root = self.include_root

        minimum_public_key_length = self.minimum_public_key_length

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if autogenerate_decrypter is not UNSET:
            field_dict["autogenerateDecrypter"] = autogenerate_decrypter
        if challenge is not UNSET:
            field_dict["challenge"] = challenge
        if decrypter_certificate is not UNSET:
            field_dict["decrypterCertificate"] = decrypter_certificate
        if decrypter_key is not UNSET:
            field_dict["decrypterKey"] = decrypter_key
        if decrypter_key_password is not UNSET:
            field_dict["decrypterKeyPassword"] = decrypter_key_password
        if encryption_algorithm_identifier is not UNSET:
            field_dict["encryptionAlgorithmIdentifier"] = encryption_algorithm_identifier
        if exclude_intermediate is not UNSET:
            field_dict["excludeIntermediate"] = exclude_intermediate
        if force_cn is not UNSET:
            field_dict["forceCN"] = force_cn
        if include_root is not UNSET:
            field_dict["includeRoot"] = include_root
        if minimum_public_key_length is not UNSET:
            field_dict["minimumPublicKeyLength"] = minimum_public_key_length

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        autogenerate_decrypter = d.pop("autogenerateDecrypter", UNSET)

        challenge = d.pop("challenge", UNSET)

        decrypter_certificate = d.pop("decrypterCertificate", UNSET)

        decrypter_key = d.pop("decrypterKey", UNSET)

        decrypter_key_password = d.pop("decrypterKeyPassword", UNSET)

        _encryption_algorithm_identifier = d.pop("encryptionAlgorithmIdentifier", UNSET)
        encryption_algorithm_identifier: Union[Unset, SCEPProvisionerEncryptionAlgorithmIdentifier]
        if isinstance(_encryption_algorithm_identifier, Unset):
            encryption_algorithm_identifier = UNSET
        else:
            encryption_algorithm_identifier = SCEPProvisionerEncryptionAlgorithmIdentifier(
                _encryption_algorithm_identifier
            )

        exclude_intermediate = d.pop("excludeIntermediate", UNSET)

        force_cn = d.pop("forceCN", UNSET)

        include_root = d.pop("includeRoot", UNSET)

        minimum_public_key_length = d.pop("minimumPublicKeyLength", UNSET)

        scep_provisioner = cls(
            autogenerate_decrypter=autogenerate_decrypter,
            challenge=challenge,
            decrypter_certificate=decrypter_certificate,
            decrypter_key=decrypter_key,
            decrypter_key_password=decrypter_key_password,
            encryption_algorithm_identifier=encryption_algorithm_identifier,
            exclude_intermediate=exclude_intermediate,
            force_cn=force_cn,
            include_root=include_root,
            minimum_public_key_length=minimum_public_key_length,
        )

        scep_provisioner.additional_properties = d
        return scep_provisioner

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
